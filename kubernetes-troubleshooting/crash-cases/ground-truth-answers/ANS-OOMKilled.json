{
    "documentation": [
        "1. OOMKilled Pod Status \n A container is terminated and marked OOMKilled if it tries to use more memory than its limit. Kubernetes enforces these limits via the container runtime and the Linux kernel's OOM killer.",
        "2. Resource Limits in Pods \n You can specify memory and CPU limits in a Pod specification. The memory limit is enforced strictly: if a container exceeds it, it is killed.",
        "3. Configuring Node.js Memory via Environment Variables \n For Node.js applications, you can pass options like --max-old-space-size via the NODE_OPTIONS environment variable to raise or lower heap memory allocation.",
        "4. Container Exit Code 137\n Exit code 137 indicates that the container was terminated by the kernel due to an out-of-memory condition (SIGKILL).",
        "5. Monitoring Resource Usage with Metrics Server\n You can use the Kubernetes Metrics Server or other tools to inspect the actual memory usage of running containers before setting limits."
    ],

    "solution": ""
}


