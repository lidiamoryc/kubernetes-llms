[
  "1. Pod Lifecycle  \n\"Kubernetes provides liveness and readiness probes to detect and remedy unhealthy containers. Liveness probes determine when to restart a container, while readiness probes indicate when a container is ready to serve traffic.\"\n\n2. Container Probes  \n\"Probes are diagnostic tools built into Kubernetes to monitor the health of an application running in a container. They can be configured to check the container's health, restart it if necessary, or remove it from a Service.\"\n\n3. Pod Environment Variables  \n\"Environment variables can be used to pass configuration information to a Pod. They are key-value pairs that can be set at the Pod or container level, providing flexibility in defining runtime parameters.\"\n\n4. Troubleshooting Pods  \n\"When a Pod is not behaving as expected, it is important to check the logs for error messages and events related to the Pod. Understanding the Pod's lifecycle and configuration can help diagnose and resolve issues.\"",
  "1. ConfigMaps  \n\"ConfigMaps allow you to decouple configuration artifacts from image content to keep containerized applications portable.\"\n\n2. Pod Lifecycle  \n\"A Pod is a group of one or more containers, with shared storage/network, and a specification for how to run the containers.\"\n\n3. Container Probes  \n\"Probes are diagnostic tools built into Kubernetes to help you monitor the health of your application.\"\n\n4. Pod Environment Variables  \n\"Environment variables can be used to configure your application, pass information to it, or provide it with settings.\"",
  "1. Pod Lifecycle  \n\"Pods can transition through different phases like Pending, Running, Succeeded, Failed, or Unknown. Use `kubectl describe pod` to check the current phase.\"\n\n2. Container Probes  \n\"Probes can help Kubernetes determine the health of a container. Liveness probes check if a container is running, while readiness probes check if a container is ready to serve traffic.\"\n\n3. Pod States  \n\"A Pod can be in one of several states: Pending, Running, Succeeded, Failed, or Unknown. Use `kubectl get pods` to view the current state of Pods in the cluster.\"",
  "1. Pod Memory Resource Requests and Limits  \n\"Specify memory requests and limits in pod resource definitions to prevent out-of-memory errors. Use `resources.requests.memory` and `resources.limits.memory` fields.\"\n\n2. Managing Resources for Containers  \n\"Containers can be limited by memory using the `resources.limits.memory` field. Ensure containers have appropriate memory limits to prevent out-of-memory errors.\"\n\n3. Troubleshooting Kubernetes Pods  \n\"Check pod logs for out-of-memory errors. Insufficient memory allocation can cause pods to crash. Adjust memory requests and limits as needed.\"\n\n4. Kubernetes Pod Lifecycle  \n\"Pods can be restarted due to various reasons, including out-of-memory errors. Understanding the pod lifecycle helps in diagnosing and resolving issues.\"",
  "1. Pod Lifecycle  \n\"Pods can transition through different states like Pending, Running, Succeeded, Failed, or Unknown. Check the pod status to understand its current state.\"\n\n2. Container Probes  \n\"Probes can help determine the health of a container. Liveness probes check if a container is running, while readiness probes check if a container is ready to serve traffic.\"\n\n3. Pod Environment Variables  \n\"Environment variables can be set in a Pod's specification to provide configuration data to the containers running in the Pod.\"\n\n4. Troubleshooting Pod Startup  \n\"If a Pod is not starting as expected, check the container logs for any error messages that might indicate the cause of the issue.\"\n\n5. Handling Dependencies  \n\"Ensure that probe timeouts are set appropriately to allow sufficient time for dependencies like databases to respond before marking a container as unhealthy.\"",
  "1. Pod Lifecycle  \n\"Pods can transition through different states like Pending, Running, Succeeded, Failed, or Unknown. Check the pod status to understand its current state.\"\n\n2. Container Probes  \n\"Probes can be used to check the health of containers in a pod. Configure readiness and liveness probes to ensure proper functioning of the application.\"\n\n3. Pod Scheduling  \n\"Pods can be scheduled on nodes based on resource requirements, node selectors, affinity, and anti-affinity rules. Understand how pod scheduling works in Kubernetes.\"\n\n4. Troubleshooting Pods  \n\"Troubleshoot pod issues by examining logs, events, and pod status. Use kubectl commands to gather information about the pod's behavior.\""
]