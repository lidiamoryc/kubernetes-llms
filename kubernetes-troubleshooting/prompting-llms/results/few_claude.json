[
  "1. DNS for Services and Pods\n\"Kubernetes creates DNS records for services and pods. DNS name resolution is handled within pods using the cluster's DNS service.\"\n\n2. Service Discovery\n\"Kubernetes supports 2 primary modes of finding a Service - environment variables and DNS. The former works only for services that exist when a pod is created.\"\n\n3. Container Probes\n\"Probes have a number of fields that you can use to more precisely control the behavior of liveness and readiness checks: timeoutSeconds, periodSeconds, successThreshold.\"\n\n4. Init Containers\n\"Init containers can contain utilities or setup scripts not present in app images. They must run to completion before any app containers start.\"\n\nRelevant Docs:\n- https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/  \n- https://kubernetes.io/docs/concepts/services-networking/service/#discovering-services\n- https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/\n- https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
  "1. Liveness and Readiness Probes\n\"Probes have a number of fields that you can use to more precisely control the behavior of liveness and readiness checks.\"\nhttps://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/\n\n2. Probe Timeouts\n\"timeoutSeconds: Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1.\"\n\n3. Tuning Probe Timing\n\"Probes have a number of fields that you can use to control more precisely when a probe is considered successful or a failure, and how often the probe should run.\"\n\n4. Probe Failure Thresholds\n\"failureThreshold: When a probe fails, Kubernetes will try failureThreshold times before giving up. Defaults to 3. Minimum value is 1.\"\nhttps://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n\n5. Probe Frequency\n\"periodSeconds: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.\"",
  "1. Startup Probes\n\"Startup probes allow time for apps to initialize. If a startup probe is set, other probes are disabled until it succeeds.\"\nhttps://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-startup-probes \n\n2. Probe Timeouts\n\"timeoutSeconds defines how long to wait before marking the probe as failed. Ensure this accounts for the slowest dependency.\"\n\n3. Probe Failures\n\"If a Container fails a probe, it is killed and subject to its restart policy, which defaults to Always.\"\nhttps://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n\n4. Container Environment \n\"The env field allows you to specify environment variables for containers using name-value pairs.\"\nhttps://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/\n\n5. Sensitive Data\n\"Sensitive data, like passwords, are more safely handled using Secrets rather than environment variables or ConfigMaps.\"\nhttps://kubernetes.io/docs/concepts/configuration/secret/",
  "1. Container Memory Limits\n\"If a Container allocates more memory than its limit, the Container becomes a candidate for termination. If the Container continues to consume memory beyond its limit, the Container is terminated. If a terminated Container can be restarted, the kubelet restarts it, as with any other type of runtime failure.\"\n\n2. Resource Requests and Limits\n\"When you specify a Pod, you can optionally specify how much of each resource a Container needs. The most common resources to specify are CPU and memory (RAM); there are others.\"\nLink: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n\n3. Node-Level Memory Constraints\n\"If a Container exceeds its memory limit, it might be terminated. If it is restartable, the kubelet will restart it, as with any other type of runtime failure.\"\nLink: https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-constraint-namespace/\n\n4. OOMKilled Reason\n\"In general, containers can be in either of two states once OOM Killed:\n- If the container has a restart policy of OnFailure or Always, it will be restarted after being killed.\n- If the container has a restart policy of Never, it will not be restarted and must be started manually.\"",
  "Here are some relevant Kubernetes documentation excerpts for the given diagnostic evidence:\n\n1. Readiness Probes\n\"Readiness probes ensure that traffic is only sent to Pods that are ready to handle requests. Misconfigured probes can cause issues.\"\nSource: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/\n\n2. Probe Timeouts\n\"Probe timeoutSeconds should be long enough for the probe to complete successfully. Short timeouts can cause unnecessary restarts.\"\n\n3. Inter-Pod Dependencies \n\"When a pod has dependencies on other services, ensure those are available before the main container starts. InitContainers or probes can help sequence startup.\"\n\n4. Service DNS\n\"Pods can connect to Services in the same namespace using the service name directly (e.g. redis-service). The full DNS name is also available: redis-service.default.svc.cluster.local\"\nSource: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\n\n5. Container Startup Order\n\"If your app has multiple containers with dependencies, consider controlling startup order with initContainers. This ensures required services are available.\"\nSource: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
  "Here are 3 relevant Kubernetes documentation excerpts related to the probe timeout warning:\n\n1. Configure Liveness, Readiness and Startup Probes\n\"If a probe timeout is set to a value that is higher than the period of the probe, the probe will time out before the next probe can be scheduled, and the kubelet will never see a passing probe.\"\nLink: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/\n\n2. Probe Timeouts\n\"The timeoutSeconds field defines how long kubelet should wait before marking the probe as failed. The default is 1 second, and minimum value is 1 second.\"\n\n3. Readiness Probes\n\"Sometimes, applications are temporarily unable to serve traffic. For example, an application might need to load large data or configuration files during startup, or depend on external services after startup. In such cases, you don't want to kill the application, but you don't want to send it requests either. Kubernetes provides readiness probes to detect and mitigate these situations.\""
]